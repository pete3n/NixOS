--- a/lib/awful/hotkeys_popup/widget.lua 
+++ b/lib/awful/hotkeys_popup/widget.lua 
@@ -1,8 +1,4 @@
----------------------------------------------------------------------------
---- Popup widget which shows current hotkeys and their descriptions.
---
--- @author Yauheni Kirylau &lt;yawghen@gmail.com&gt;
--- @copyright 2014-2015 Yauheni Kirylau
+--------------------------------------------------------------------------- - Popup widget which shows current hotkeys and their descriptions. @author Yauheni Kirylau &lt;yawghen@gmail.com&gt; @copyright 2014-2015 Yauheni Kirylau
 -- @module awful.hotkeys_popup.widget
 ---------------------------------------------------------------------------
 
@@ -489,7 +485,7 @@
     -- @tparam[opt] table show_args Additional arguments.
     -- @tparam[opt=true] boolean show_args.show_awesome_keys Show AwesomeWM hotkeys.
     -- When set to `false` only app-specific hotkeys will be shown.
-    function widget_instance:show_help(c, s, show_args)
+    function widget_instance:show_help(c, s, show_args, ps_hotkeys)
         show_args = show_args or {}
         local show_awesome_keys = show_args.show_awesome_keys ~= false
 
@@ -498,26 +494,44 @@
 
         c = c or capi.client.focus
         s = s or (c and c.screen or awful.screen.focused())
+        local clientExists = not (c == nil) -- Prevent nil lookup if no client windows are open
 
         local available_groups = {}
+
         for group, _ in pairs(self._group_list) do
             local need_match
-            for group_name, data in pairs(self.group_rules) do
-                if group_name==group and (
-                    data.rule or data.rule_any or data.except or data.except_any
-                ) then
-                    if not c or not awful.rules.matches(c, {
-                        rule=data.rule,
-                        rule_any=data.rule_any,
-                        except=data.except,
-                        except_any=data.except_any
-                    }) then
-                        need_match = true
-                        break
+            if clientExists then
+                for group_name, data in pairs(self.group_rules) do
+                    if group_name == group and (
+                        data.rule or data.rule_any or dataexcept or data.except_any
+                    ) then
+                        if not c or not awful.rules.matches(c, {
+                            rule=data.rule,
+                            rule_any=data.rule_any,
+                            except=data.except,
+                            except_any=data.except_any
+                        }) then
+                            need_match = true
+                            break
+                        end
                     end
                 end
+            else -- Default fallback if no client windows are open
+                if self.group_rules[group] then
+                    need_match = true
+                end
+            end
+            if not need_match then 
+                table.insert(available_groups, group) 
+            end
+        end
+
+        if ps_hotkeys and type(ps_hotkeys) == "table" then
+            for _, group in ipairs(ps_hotkeys) do
+                if not awful.util.table.hasitem(available_groups, group) then
+                    table.insert(available_groups, group)
+                end
             end
-            if not need_match then table.insert(available_groups, group) end
         end
 
         local joined_groups = join_plus_sort(available_groups)..tostring(show_awesome_keys)
@@ -545,6 +559,53 @@
         return help_wibox.keygrabber
     end
 
+    function widget_instance:show_ps_help(show_args)
+        show_args = show_args or {}
+        local show_awesome_keys = show_args.show_awesome_keys ~= false
+        local ps_hotkeys = {}
+        self:_import_awful_keys()
+        self:_load_widget_settings()
+
+        local handle = io.popen("ps -a | awk '{print $4}' | tail -n +2")
+        local result = handle:read("*all")
+        handle:close()
+
+        local programs = {}
+        local seen = {}
+        local all_available_groups = {}
+
+        for prog in string.gmatch(result, '(%S+)') do
+            if not seen[prog] then
+                table.insert(programs, { name = prog })
+                seen[prog] = true
+            end
+        end
+
+        for _, mock_client in ipairs(programs) do
+            for group_name, data in pairs(self.group_rules) do
+                if awful.rules.matches(mock_client, {
+                    rule = data.rule,
+                    rule_any = data.rule_any,
+                    except = data.except,
+                    except_any = data.except_any
+                }) then
+                    for group, _ in pairs(self._group_list) do
+                        if string.sub(group, 1, #group_name) == group_name then
+                            all_available_groups[group] = true
+                        end
+                    end
+                end
+            end
+        end
+
+        local matched_groups = {}
+        for group, _ in pairs(all_available_groups) do
+            table.insert(matched_groups, group)
+        end
+
+        return matched_groups
+    end
+
     --- Add hotkey descriptions for third-party applications.
     -- @tparam table hotkeys Table with bindings,
     -- see `awful.hotkeys_popup.key.vim` as an example.
@@ -594,6 +655,11 @@
     return get_default_widget():show_help(...)
 end
 
+
+function widget.show_ps_help(...)
+    return get_default_widget():show_ps_help(...)
+end
+
 --- Add hotkey descriptions for third-party applications
 -- (default widget instance will be used).
 -- @tparam table hotkeys Table with bindings,
